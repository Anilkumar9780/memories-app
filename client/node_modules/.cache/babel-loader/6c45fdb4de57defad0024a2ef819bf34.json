{"ast":null,"code":"// action component\nimport { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE, FETCH_BY_SEARCH, START_LOADING, END_LOADING, FETCH_POST_DETAIL, POST_COMMENT } from '../constants/actionTypes'; // api \n\nimport * as api from '../api/Index.js';\n/**\n *  get the all user post \n */\n\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n * get single post detail\n * @param {string} id \n * @returns node\n */\n\nexport const getPostDetail = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPostDetail(id);\n    dispatch({\n      type: FETCH_POST_DETAIL,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n * search posts\n * @param {object} searchQuery \n * @returns node \n */\n\nexport const getPostBySearch = searchQuery => async dispatch => {\n  console.log(searchQuery);\n\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    console.log(data);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n * create post \n * @param {object} post \n */\n\nexport const createPost = (post, file, navigate) => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createPost(post, file);\n    navigate(`/posts/${data._id}`);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n *  update post \n * @param {string} id \n * @param {object} post \n */\n\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n * user like post \n * @param {string} id \n */\n\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n * Delete post \n * @param {string} id \n */\n\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n *  comment post action\n * @param {string} value \n * @param {string} id \n * @returns node\n */\n\nexport const commentPost = (value, id) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.comment(value, id);\n    dispatch({\n      type: POST_COMMENT,\n      payload: data\n    });\n    return data.comments;\n  } catch (error) {\n    console.log(error.message);\n  }\n};","map":{"version":3,"sources":["C:/Users/Administrator/social_memories/client/src/actions/Posts.js"],"names":["FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","FETCH_BY_SEARCH","START_LOADING","END_LOADING","FETCH_POST_DETAIL","POST_COMMENT","api","getPosts","page","dispatch","type","data","fetchPosts","payload","error","console","log","message","getPostDetail","id","fetchPostDetail","getPostBySearch","searchQuery","fetchPostsBySearch","createPost","post","file","navigate","_id","updatePost","likePost","deletePost","commentPost","value","comment","comments"],"mappings":"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","sourcesContent":["// action component\nimport {\n  FETCH_ALL,\n  CREATE,\n  UPDATE,\n  DELETE,\n  LIKE,\n  FETCH_BY_SEARCH,\n  START_LOADING,\n  END_LOADING,\n  FETCH_POST_DETAIL,\n\n  POST_COMMENT\n} from '../constants/actionTypes';\n\n// api \nimport * as api from '../api/Index.js';\n\n/**\n *  get the all user post \n */\nexport const getPosts = (page) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.fetchPosts(page);\n    dispatch({ type: FETCH_ALL, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n/**\n * get single post detail\n * @param {string} id \n * @returns node\n */\nexport const getPostDetail = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.fetchPostDetail(id);\n    dispatch({ type: FETCH_POST_DETAIL, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n\n/**\n * search posts\n * @param {object} searchQuery \n * @returns node \n */\nexport const getPostBySearch = (searchQuery) => async (dispatch) => {\n  console.log(searchQuery);\n  try {\n    dispatch({ type: START_LOADING });\n    const { data: { data } } = await api.fetchPostsBySearch(searchQuery);\n    console.log(data)\n    dispatch({ type: FETCH_BY_SEARCH, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n\n/**\n * create post \n * @param {object} post \n */\nexport const createPost = (post, file, navigate) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING })\n    const { data } = await api.createPost(post, file);\n    navigate(`/posts/${data._id}`)\n    dispatch({ type: CREATE, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n/**\n *  update post \n * @param {string} id \n * @param {object} post \n */\nexport const updatePost = (id, post) => async (dispatch) => {\n  try {\n    const { data } = await api.updatePost(id, post);\n    dispatch({ type: UPDATE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n/**\n * user like post \n * @param {string} id \n */\nexport const likePost = (id) => async (dispatch) => {\n  try {\n    const { data } = await api.likePost(id);\n    dispatch({ type: LIKE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n/**\n * Delete post \n * @param {string} id \n */\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await api.deletePost(id);\n    dispatch({ type: DELETE, payload: id });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n/**\n *  comment post action\n * @param {string} value \n * @param {string} id \n * @returns node\n */\nexport const commentPost = (value, id) => async (dispatch) => {\n  try {\n    const { data } = await api.comment(value, id);\n    dispatch({ type: POST_COMMENT, payload: data });\n    return data.comments;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}