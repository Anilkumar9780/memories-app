{"ast":null,"code":"// action component\nimport { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE, FETCH_BY_SEARCH } from '../constants/actionTypes'; // api \n\nimport * as api from '../api/Index.js';\n/**\n *  get the all user post \n */\n\nexport const getPosts = page => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n * search posts\n * @param {object} searchQuery \n * @returns node \n */\n\nexport const getPostBySearch = searchQuery => async dispatch => {\n  try {\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n * create post \n * @param {object} post \n */\n\nexport const createPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n *  update post \n * @param {string} id \n * @param {object} post \n */\n\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n * user like post \n * @param {string} id \n */\n\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n * Delete post \n * @param {string} id \n */\n\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};","map":{"version":3,"sources":["C:/Users/Administrator/social_memories/client/src/actions/Posts.js"],"names":["FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","FETCH_BY_SEARCH","api","getPosts","page","dispatch","data","fetchPosts","type","payload","error","console","log","message","getPostBySearch","searchQuery","fetchPostsBySearch","createPost","post","updatePost","id","likePost","deletePost"],"mappings":"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","sourcesContent":["// action component\nimport { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE, FETCH_BY_SEARCH } from '../constants/actionTypes';\n\n// api \nimport * as api from '../api/Index.js';\n\n/**\n *  get the all user post \n */\nexport const getPosts = (page) => async (dispatch) => {\n  try {\n    const { data } = await api.fetchPosts(page);\n    dispatch({ type: FETCH_ALL, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n/**\n * search posts\n * @param {object} searchQuery \n * @returns node \n */\nexport const getPostBySearch = (searchQuery) => async (dispatch) => {\n  try {\n    const { data: { data } } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({ type: FETCH_BY_SEARCH, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n\n/**\n * create post \n * @param {object} post \n */\nexport const createPost = (post) => async (dispatch) => {\n  try {\n    const { data } = await api.createPost(post);\n    dispatch({ type: CREATE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n/**\n *  update post \n * @param {string} id \n * @param {object} post \n */\nexport const updatePost = (id, post) => async (dispatch) => {\n  try {\n    const { data } = await api.updatePost(id, post);\n    dispatch({ type: UPDATE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n/**\n * user like post \n * @param {string} id \n */\nexport const likePost = (id) => async (dispatch) => {\n  try {\n    const { data } = await api.likePost(id);\n    dispatch({ type: LIKE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n/**\n * Delete post \n * @param {string} id \n */\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await api.deletePost(id);\n    dispatch({ type: DELETE, payload: id });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n\n"]},"metadata":{},"sourceType":"module"}