{"ast":null,"code":"// action type component\nimport { AUTH, RESET_PASSWORD } from '../constants/actionTypes'; // packages\n\nimport { toast } from 'react-toastify'; // api \n\nimport * as api from '../api/Index.js';\n/**\n *  user signin \n * @param {object} formData   \n */\n\nexport const signin = (formData, navigate) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.signIn(formData);\n    console.log(data === null || data === void 0 ? void 0 : data.message);\n    dispatch({\n      type: AUTH,\n      data\n    });\n    navigate('/');\n    toast.success(data === null || data === void 0 ? void 0 : data.message, {\n      position: \"bottom-right\"\n    });\n  } catch (err) {\n    var _err$response, _err$response$data;\n\n    toast.error(err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message, {\n      position: \"bottom-right\"\n    });\n  }\n};\n/**\n * user signup \n * @param {object} formData \n * @param {*} navigate \n */\n\nexport const signup = (formData, navigate) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.signUp(formData);\n    dispatch({\n      type: AUTH,\n      data\n    });\n    navigate('/');\n    toast.success(data === null || data === void 0 ? void 0 : data.message, {\n      position: \"bottom-right\",\n      type: \"success\"\n    });\n  } catch (err) {\n    var _err$response2, _err$response2$data;\n\n    toast.error(err === null || err === void 0 ? void 0 : (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message, {\n      position: \"bottom-right\"\n    });\n  }\n};\nexport const resetPassword = email => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.resetPasswordApi(email);\n    dispatch({\n      type: RESET_PASSWORD,\n      payload: data\n    });\n    toast.success(data === null || data === void 0 ? void 0 : data.message, {\n      position: \"bottom-right\",\n      type: \"success\"\n    });\n  } catch (err) {\n    var _err$response3, _err$response3$data;\n\n    toast.error(err === null || err === void 0 ? void 0 : (_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message, {\n      position: \"bottom-right\"\n    });\n  }\n};\nexport const newPasswordGen = (password, token) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.newPasswordApi(password, token);\n    dispatch({\n      type: \"NEW_PASSWORD\",\n      data\n    });\n    toast.success(data === null || data === void 0 ? void 0 : data.message, {\n      position: \"bottom-right\",\n      type: \"success\"\n    });\n  } catch (err) {\n    var _err$response4, _err$response4$data;\n\n    toast.error(err === null || err === void 0 ? void 0 : (_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message, {\n      position: \"bottom-right\"\n    });\n  }\n};","map":{"version":3,"sources":["/home/anil/memories-app/client/src/actions/Auth.js"],"names":["AUTH","RESET_PASSWORD","toast","api","signin","formData","navigate","dispatch","data","signIn","console","log","message","type","success","position","err","error","response","signup","signUp","resetPassword","email","resetPasswordApi","payload","newPasswordGen","password","token","newPasswordApi"],"mappings":"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","sourcesContent":["// action type component\nimport { AUTH, RESET_PASSWORD } from '../constants/actionTypes';\n\n// packages\nimport { toast } from 'react-toastify';\n\n// api \nimport * as api from '../api/Index.js';\n\n/**\n *  user signin \n * @param {object} formData   \n */\nexport const signin = (formData, navigate) => async (dispatch) => {\n    try {\n        const { data } = await api.signIn(formData);\n        console.log(data?.message)\n        dispatch({ type: AUTH, data })\n        navigate('/');\n        toast.success(data?.message, {\n            position: \"bottom-right\"\n        });\n    } catch (err) {\n        toast.error(err?.response?.data?.message, {\n            position: \"bottom-right\"\n        });\n    }\n};\n\n/**\n * user signup \n * @param {object} formData \n * @param {*} navigate \n */\nexport const signup = (formData, navigate) => async (dispatch) => {\n    try {\n        const { data } = await api.signUp(formData);\n        dispatch({ type: AUTH, data });\n        navigate('/');\n        toast.success(data?.message, {\n            position: \"bottom-right\",\n            type: \"success\",\n        });\n    } catch (err) {\n        toast.error(err?.response?.data?.message, {\n            position: \"bottom-right\"\n        });\n    }\n};\n\nexport const resetPassword = (email) => async (dispatch) => {\n    try {\n        const { data } = await api.resetPasswordApi(email);\n        dispatch({ type: RESET_PASSWORD, payload: data });\n        toast.success(data?.message, {\n            position: \"bottom-right\",\n            type: \"success\",\n        });\n    } catch (err) {\n        toast.error(err?.response?.data?.message, {\n            position: \"bottom-right\"\n        });\n    }\n};\n\n\nexport const newPasswordGen = (password, token) => async (dispatch) => {\n    try {\n        const { data } = await api.newPasswordApi(password, token);\n        dispatch({ type: \"NEW_PASSWORD\", data });\n        toast.success(data?.message, {\n            position: \"bottom-right\",\n            type: \"success\",\n        });\n    } catch (err) {\n        toast.error(err?.response?.data?.message, {\n            position: \"bottom-right\"\n        });\n    }\n};"]},"metadata":{},"sourceType":"module"}