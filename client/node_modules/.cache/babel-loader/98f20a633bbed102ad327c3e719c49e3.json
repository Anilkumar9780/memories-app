{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\social_memories\\\\client\\\\src\\\\components\\\\Form\\\\Form.js\";\nimport React, { useState, useEffect, useRef } from 'react'; //material ui package\n\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport useStyles from './Styles'; //packages\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom'; //components\n\nimport { createPost, updatePost } from '../../actions/Posts';\n\nconst Form = ({\n  currentId,\n  setCurrentId\n}) => {\n  var _user$result2;\n\n  const [postData, setPostData] = useState({\n    title: '',\n    message: ' ',\n    tags: '',\n    file: null\n  });\n  const [error, setError] = useState(false);\n  const post = useSelector(state => currentId ? state.posts.posts.find(message => message._id === currentId) : null);\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const inputRef = useRef(); // onmonut\n\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n  /**\n   * Reset input box\n   */\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      title: '',\n      message: '',\n      tags: '',\n      file: null\n    });\n    inputRef.current.value = \"\";\n  };\n\n  console.log(postData.tags);\n  /**\n   * create user post \n   * @param {object} e \n   */\n\n  const handleSubmit = async e => {\n    var _user$result;\n\n    if (!postData) {\n      setError(true);\n      return false;\n    }\n\n    const name = user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name;\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('name', name);\n    formData.append('file', postData.file);\n    formData.append('title', postData.title);\n    formData.append('tags', postData.tags);\n    formData.append('message', postData.message);\n\n    if (currentId === 0) {\n      dispatch(createPost(formData, navigate));\n      clear();\n    } else {\n      dispatch(updatePost(currentId, formData));\n      clear();\n    }\n  };\n\n  if (!(user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name)) {\n    return /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paper,\n      elevation: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, \"Please Sign In to create your own memories and like other's memories...\"));\n  }\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    elevation: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    autoComplete: \"off\",\n    noValidate: true,\n    className: `${classes.root} ${classes.form}`,\n    onSubmit: handleSubmit,\n    method: \"post\",\n    action: \"upload\",\n    enctype: \"multipart/form-data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, currentId ? `Editing \"${post.title}\"` : 'Creating a Memory'), /*#__PURE__*/React.createElement(TextField, {\n    name: \"title\",\n    variant: \"outlined\",\n    label: \"Title\",\n    fullWidth: true,\n    value: postData.title,\n    onChange: e => setPostData({ ...postData,\n      title: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }), error && !postData.title && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"invalid-msg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 38\n    }\n  }, \"Post title is require\"), /*#__PURE__*/React.createElement(TextField, {\n    spellCheck: true,\n    name: \"message\",\n    variant: \"outlined\",\n    label: \"Message\",\n    fullWidth: true,\n    multiline: true,\n    minRows: 4,\n    value: postData.message,\n    onChange: e => setPostData({ ...postData,\n      message: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }), error && !postData.message && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"invalid-msg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 40\n    }\n  }, \"Post message is require\"), /*#__PURE__*/React.createElement(TextField, {\n    name: \"tags\",\n    variant: \"outlined\",\n    label: \"Tags (coma separated)\",\n    fullWidth: true,\n    value: postData.tags,\n    onChange: e => setPostData({ ...postData,\n      tags: e.target.value.split(',')\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }), error && !postData.tags && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"invalid-msg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 37\n    }\n  }, \"Post tags is require\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fileInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    name: \"file\",\n    type: \"file\",\n    ref: inputRef,\n    onChange: e => setPostData({ ...postData,\n      file: e.target.files[0]\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }), error && !postData.file && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"invalid-msg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 39\n    }\n  }, \"Photo is require\")), /*#__PURE__*/React.createElement(Button, {\n    className: classes.buttonSubmit,\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    type: \"submit\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    size: \"large\",\n    onClick: clear,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, \"Reset\")));\n};\n\nexport default Form;","map":{"version":3,"sources":["C:/Users/Administrator/social_memories/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","useRef","TextField","Button","Typography","Paper","useStyles","useDispatch","useSelector","useNavigate","createPost","updatePost","Form","currentId","setCurrentId","postData","setPostData","title","message","tags","file","error","setError","post","state","posts","find","_id","user","JSON","parse","localStorage","getItem","dispatch","classes","navigate","inputRef","clear","current","value","console","log","handleSubmit","e","name","result","preventDefault","formData","FormData","append","paper","root","form","target","split","fileInput","files","buttonSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\n//material ui package\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport useStyles from './Styles';\n\n//packages\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\n//components\nimport { createPost, updatePost } from '../../actions/Posts';\n\nconst Form = ({\n  currentId, setCurrentId\n}) => {\n  const [postData, setPostData] = useState({\n    title: '',\n    message: ' ',\n    tags: '',\n    file: null\n  })\n  const [error, setError] = useState(false);\n  const post = useSelector((state) => (currentId ? state.posts.posts.find((message) => message._id === currentId) : null));\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const inputRef = useRef();\n\n  // onmonut\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  /**\n   * Reset input box\n   */\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({ title: '', message: '', tags: '', file: null });\n    inputRef.current.value = \"\";\n  };\n\n  console.log(postData.tags)\n  /**\n   * create user post \n   * @param {object} e \n   */\n  const handleSubmit = async (e) => {\n    if (!postData) {\n      setError(true);\n      return false\n    }\n    const name = user?.result?.name;\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('name', name);\n    formData.append('file', postData.file);\n    formData.append('title', postData.title);\n    formData.append('tags', postData.tags);\n    formData.append('message', postData.message);\n    if (currentId === 0) {\n      dispatch(createPost(formData, navigate));\n      clear();\n    } else {\n      dispatch(updatePost(currentId, formData));\n      clear();\n    }\n  };\n\n\n  if (!user?.result?.name) {\n    return (\n      <Paper className={classes.paper} elevation={6}>\n        <Typography variant='h6' align='center'>\n          Please Sign In to create your own memories and like other's memories...\n        </Typography>\n      </Paper>\n    )\n  }\n  return (\n    <Paper className={classes.paper} elevation={6}>\n      <form\n        autoComplete=\"off\"\n        noValidate\n        className={`${classes.root} ${classes.form}`}\n        onSubmit={handleSubmit}\n        method='post'\n        action='upload'\n        enctype=\"multipart/form-data\"\n      >\n        <Typography variant=\"h6\">{currentId ? `Editing \"${post.title}\"` : 'Creating a Memory'}</Typography>\n        <TextField\n          name=\"title\"\n          variant=\"outlined\"\n          label=\"Title\"\n          fullWidth\n          value={postData.title}\n          onChange={(e) => setPostData({ ...postData, title: e.target.value })}\n        />\n        {error && !postData.title && <span className='invalid-msg'>Post title is require</span>}\n        <TextField\n          spellCheck={true}\n          name=\"message\"\n          variant=\"outlined\"\n          label=\"Message\"\n          fullWidth\n          multiline\n          minRows={4}\n          value={postData.message}\n          onChange={(e) => setPostData({ ...postData, message: e.target.value })}\n        />\n        {error && !postData.message && <span className='invalid-msg'>Post message is require</span>}\n        <TextField\n          name=\"tags\"\n          variant=\"outlined\"\n          label=\"Tags (coma separated)\"\n          fullWidth\n          value={postData.tags}\n          onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })}\n        />\n        {error && !postData.tags && <span className='invalid-msg'>Post tags is require</span>}\n        <div className={classes.fileInput}>\n          <TextField\n            name=\"file\"\n            type=\"file\"\n            ref={inputRef}\n            onChange={(e) => setPostData({ ...postData, file: e.target.files[0] })}\n          />\n          {error && !postData.file && <span className='invalid-msg'>Photo is require</span>}\n        </div>\n        <Button\n          className={classes.buttonSubmit}\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          type=\"submit\"\n          fullWidth\n        >Submit\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"large\"\n          onClick={clear}\n          fullWidth\n        >Reset\n        </Button>\n      </form>\n    </Paper>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}