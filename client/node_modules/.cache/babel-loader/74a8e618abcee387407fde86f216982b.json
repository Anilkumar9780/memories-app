{"ast":null,"code":"// action component\nimport { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE, FETCH_BY_SEARCH, START_LOADING, END_LOADING, FETCH_POST_DETAIL, USER_PROFILE, POST_COMMENT, USER_PROFILE_POST, USER_FOLLOW, SERACH_USER } from '../constants/actionTypes'; // api \n\nimport * as api from '../api/Index.js';\n/**\n * get the all user post \n * @param {number} page \n * @returns node\n */\n\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n * get single post detail\n * @param {string} id \n * @returns node\n */\n\nexport const getPostDetail = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPostDetail(id);\n    dispatch({\n      type: FETCH_POST_DETAIL,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n * search posts\n * @param {object} searchQuery \n * @returns node \n */\n\nexport const getPostBySearch = searchQuery => async dispatch => {\n  console.log(searchQuery);\n\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n * create post \n * @param {object} post \n */\n\nexport const createPost = (formData, navigate) => async dispatch => {\n  // console.log(Object.entries(formData))\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createPost(formData);\n    navigate(`/posts/${data._id}`);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n *  update post \n * @param {string} id \n * @param {object} post \n */\n\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n * user like post \n * @param {string} id \n */\n\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n * Delete post \n * @param {string} id \n */\n\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n *  comment post action\n * @param {string} value \n * @param {string} id \n * @returns node\n */\n\nexport const commentPost = (value, id) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.comment(value, id);\n    dispatch({\n      type: POST_COMMENT,\n      payload: data\n    });\n    return data.comments;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n/**\n *get user profile \n * @param {string} id \n * @returns \n */\n\nexport const userProfile = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchUserProfile(id);\n    dispatch({\n      type: USER_PROFILE,\n      payload: data.user\n    });\n    dispatch({\n      type: USER_PROFILE_POST,\n      payload: data.post\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const searchUsers = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.searchUser();\n    dispatch({\n      type: SERACH_USER,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n/**\n * follow user by user id\n * @param {string} userId \n */\n\nexport const follow = followId => async dispatch => {\n  console.log(followId);\n\n  try {\n    const {\n      data\n    } = await api.followUser(followId);\n    console.log(data);\n    dispatch({\n      type: USER_FOLLOW,\n      payload: {\n        following: data.following,\n        followers: data.followers\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["C:/Users/Administrator/social_memories/client/src/actions/Posts.js"],"names":["FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","FETCH_BY_SEARCH","START_LOADING","END_LOADING","FETCH_POST_DETAIL","USER_PROFILE","POST_COMMENT","USER_PROFILE_POST","USER_FOLLOW","SERACH_USER","api","getPosts","page","dispatch","type","data","fetchPosts","payload","error","console","log","message","getPostDetail","id","fetchPostDetail","getPostBySearch","searchQuery","fetchPostsBySearch","createPost","formData","navigate","_id","updatePost","post","likePost","deletePost","commentPost","value","comment","comments","userProfile","fetchUserProfile","user","searchUsers","searchUser","follow","followId","followUser","following","followers"],"mappings":"AAAA;AACA,SACEA,SADF,EAEEC,MAFF,EAGEC,MAHF,EAIEC,MAJF,EAKEC,IALF,EAMEC,eANF,EAOEC,aAPF,EAQEC,WARF,EASEC,iBATF,EAUEC,YAVF,EAWEC,YAXF,EAYEC,iBAZF,EAaEC,WAbF,EAcEC,WAdF,QAeO,0BAfP,C,CAiBA;;AACA,OAAO,KAAKC,GAAZ,MAAqB,iBAArB;AAEA;;;;;;AAKA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;AACpD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEZ;AAAR,KAAD,CAAR;AACA,UAAM;AAAEa,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACM,UAAJ,CAAeJ,IAAf,CAAvB;AACAC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAElB,SAAR;AAAmBqB,MAAAA,OAAO,EAAEF;AAA5B,KAAD,CAAR;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AACD,GALD,CAKE,OAAOe,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CATM;AAWP;;;;;;AAKA,OAAO,MAAMC,aAAa,GAAIC,EAAD,IAAQ,MAAOV,QAAP,IAAoB;AACvD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEZ;AAAR,KAAD,CAAR;AACA,UAAM;AAAEa,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACc,eAAJ,CAAoBD,EAApB,CAAvB;AACAV,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEV,iBAAR;AAA2Ba,MAAAA,OAAO,EAAEF;AAApC,KAAD,CAAR;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AACD,GALD,CAKE,OAAOe,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CATM;AAYP;;;;;;AAKA,OAAO,MAAMI,eAAe,GAAIC,WAAD,IAAiB,MAAOb,QAAP,IAAoB;AAClEM,EAAAA,OAAO,CAACC,GAAR,CAAYM,WAAZ;;AACA,MAAI;AACFb,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEZ;AAAR,KAAD,CAAR;AACA,UAAM;AAAEa,MAAAA,IAAI,EAAE;AAAEA,QAAAA;AAAF;AAAR,QAAqB,MAAML,GAAG,CAACiB,kBAAJ,CAAuBD,WAAvB,CAAjC;AACAb,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEb,eAAR;AAAyBgB,MAAAA,OAAO,EAAEF;AAAlC,KAAD,CAAR;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AACD,GALD,CAKE,OAAOe,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CAVM;AAaP;;;;;AAIA,OAAO,MAAMO,UAAU,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB,MAAOjB,QAAP,IAAoB;AACpE;AACA,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEZ;AAAR,KAAD,CAAR;AACA,UAAM;AAAEa,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACkB,UAAJ,CAAeC,QAAf,CAAvB;AACAC,IAAAA,QAAQ,CAAE,UAASf,IAAI,CAACgB,GAAI,EAApB,CAAR;AACAlB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEjB,MAAR;AAAgBoB,MAAAA,OAAO,EAAEF;AAAzB,KAAD,CAAR;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AACD,GAND,CAME,OAAOe,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CAXM;AAaP;;;;;;AAKA,OAAO,MAAMW,UAAU,GAAG,CAACT,EAAD,EAAKU,IAAL,KAAc,MAAOpB,QAAP,IAAoB;AAC1D,MAAI;AACF,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACsB,UAAJ,CAAeT,EAAf,EAAmBU,IAAnB,CAAvB;AACApB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEhB,MAAR;AAAgBmB,MAAAA,OAAO,EAAEF;AAAzB,KAAD,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CAPM;AASP;;;;;AAIA,OAAO,MAAMa,QAAQ,GAAIX,EAAD,IAAQ,MAAOV,QAAP,IAAoB;AAClD,MAAI;AACF,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACwB,QAAJ,CAAaX,EAAb,CAAvB;AACAV,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEd,IAAR;AAAciB,MAAAA,OAAO,EAAEF;AAAvB,KAAD,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CAPM;AASP;;;;;AAIA,OAAO,MAAMc,UAAU,GAAIZ,EAAD,IAAQ,MAAOV,QAAP,IAAoB;AACpD,MAAI;AACF,UAAMH,GAAG,CAACyB,UAAJ,CAAeZ,EAAf,CAAN;AACAV,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEf,MAAR;AAAgBkB,MAAAA,OAAO,EAAEM;AAAzB,KAAD,CAAR;AACD,GAHD,CAGE,OAAOL,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CAPM;AASP;;;;;;;AAMA,OAAO,MAAMe,WAAW,GAAG,CAACC,KAAD,EAAQd,EAAR,KAAe,MAAOV,QAAP,IAAoB;AAC5D,MAAI;AACF,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAML,GAAG,CAAC4B,OAAJ,CAAYD,KAAZ,EAAmBd,EAAnB,CAAvB;AACAV,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,YAAR;AAAsBW,MAAAA,OAAO,EAAEF;AAA/B,KAAD,CAAR;AACA,WAAOA,IAAI,CAACwB,QAAZ;AACD,GAJD,CAIE,OAAOrB,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CARM;AAUP;;;;;;AAKA,OAAO,MAAMmB,WAAW,GAAIjB,EAAD,IAAQ,MAAOV,QAAP,IAAoB;AACrD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEZ;AAAR,KAAD,CAAR;AACA,UAAM;AAAEa,MAAAA;AAAF,QAAW,MAAML,GAAG,CAAC+B,gBAAJ,CAAqBlB,EAArB,CAAvB;AACAV,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET,YAAR;AAAsBY,MAAAA,OAAO,EAAEF,IAAI,CAAC2B;AAApC,KAAD,CAAR;AACA7B,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,iBAAR;AAA2BU,MAAAA,OAAO,EAAEF,IAAI,CAACkB;AAAzC,KAAD,CAAR;AACApB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AACD,GAND,CAME,OAAOe,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CAVM;AAYP,OAAO,MAAMsB,WAAW,GAAG,MAAM,MAAO9B,QAAP,IAAoB;AACnD,MAAI;AACF,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACkC,UAAJ,EAAvB;AACA/B,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,WAAR;AAAqBQ,MAAAA,OAAO,EAAEF;AAA9B,KAAD,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAPM;AAWP;;;;;AAIA,OAAO,MAAM2B,MAAM,GAAIC,QAAD,IAAc,MAAOjC,QAAP,IAAoB;AACtDM,EAAAA,OAAO,CAACC,GAAR,CAAY0B,QAAZ;;AACA,MAAI;AACF,UAAM;AAAE/B,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACqC,UAAJ,CAAeD,QAAf,CAAvB;AACA3B,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN,WAAR;AAAqBS,MAAAA,OAAO,EAAE;AAAE+B,QAAAA,SAAS,EAAEjC,IAAI,CAACiC,SAAlB;AAA6BC,QAAAA,SAAS,EAAElC,IAAI,CAACkC;AAA7C;AAA9B,KAAD,CAAR;AACD,GAJD,CAIE,OAAO/B,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CATM","sourcesContent":["// action component\nimport {\n  FETCH_ALL,\n  CREATE,\n  UPDATE,\n  DELETE,\n  LIKE,\n  FETCH_BY_SEARCH,\n  START_LOADING,\n  END_LOADING,\n  FETCH_POST_DETAIL,\n  USER_PROFILE,\n  POST_COMMENT,\n  USER_PROFILE_POST,\n  USER_FOLLOW,\n  SERACH_USER\n} from '../constants/actionTypes';\n\n// api \nimport * as api from '../api/Index.js';\n\n/**\n * get the all user post \n * @param {number} page \n * @returns node\n */\nexport const getPosts = (page) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.fetchPosts(page);\n    dispatch({ type: FETCH_ALL, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n/**\n * get single post detail\n * @param {string} id \n * @returns node\n */\nexport const getPostDetail = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.fetchPostDetail(id);\n    dispatch({ type: FETCH_POST_DETAIL, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n\n/**\n * search posts\n * @param {object} searchQuery \n * @returns node \n */\nexport const getPostBySearch = (searchQuery) => async (dispatch) => {\n  console.log(searchQuery);\n  try {\n    dispatch({ type: START_LOADING });\n    const { data: { data } } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({ type: FETCH_BY_SEARCH, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n\n/**\n * create post \n * @param {object} post \n */\nexport const createPost = (formData, navigate) => async (dispatch) => {\n  // console.log(Object.entries(formData))\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.createPost(formData);\n    navigate(`/posts/${data._id}`)\n    dispatch({ type: CREATE, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n/**\n *  update post \n * @param {string} id \n * @param {object} post \n */\nexport const updatePost = (id, post) => async (dispatch) => {\n  try {\n    const { data } = await api.updatePost(id, post);\n    dispatch({ type: UPDATE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n/**\n * user like post \n * @param {string} id \n */\nexport const likePost = (id) => async (dispatch) => {\n  try {\n    const { data } = await api.likePost(id);\n    dispatch({ type: LIKE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n/**\n * Delete post \n * @param {string} id \n */\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await api.deletePost(id);\n    dispatch({ type: DELETE, payload: id });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n/**\n *  comment post action\n * @param {string} value \n * @param {string} id \n * @returns node\n */\nexport const commentPost = (value, id) => async (dispatch) => {\n  try {\n    const { data } = await api.comment(value, id);\n    dispatch({ type: POST_COMMENT, payload: data });\n    return data.comments;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\n/**\n *get user profile \n * @param {string} id \n * @returns \n */\nexport const userProfile = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.fetchUserProfile(id);\n    dispatch({ type: USER_PROFILE, payload: data.user });\n    dispatch({ type: USER_PROFILE_POST, payload: data.post });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const searchUsers = () => async (dispatch) => {\n  try {\n    const { data } = await api.searchUser();\n    dispatch({ type: SERACH_USER, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n\n\n/**\n * follow user by user id\n * @param {string} userId \n */\nexport const follow = (followId) => async (dispatch) => {\n  console.log(followId)\n  try {\n    const { data } = await api.followUser(followId);\n    console.log(data);\n    dispatch({ type: USER_FOLLOW, payload: { following: data.following, followers: data.followers } })\n  } catch (error) {\n    console.log(error);\n  }\n};"]},"metadata":{},"sourceType":"module"}